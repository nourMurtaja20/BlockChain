const SHA256=require('crypto-js/');

const EC =require(elliptic).ec;
const ec =new EC('secp256k1');

class Transaction{
    constructor(formAddress,toAddress,amount){
        this.formAddress =formAddress;
        this.toAddress =toAddress;
        this.amount =amount;
    }

    calculateHash(){
        return SHA256(this.formAddress+ this.amount).toString();
    }

    signTransaction(signingKey){
        if(signingKey.getPublic('hex') !== this.formAddress){
            throw new Error('You cann’t sign transactions');
        }

        const hashTx =this.calculateHash();
        const sig =signingKey.sign(hashTx,'base64');
        this.signature =sig.toDER('hex');
    }

    isValid(){
        if(this.formAddress === null)
            return true;

        if(!this.signature || this.signature.length === 0){
            throw new Error('No signature in this transactions');
        }    

        const publicKey =ec.keyFormPublic(this.formAddress ,'hex');
        return publicKey.verify(this.calculateHash(),this.signature);
    }
}

class Block {
    constructor(timestamp,data,previousHash=''){
        this.timestamp =timestamp;
        this.data =data;
        this.previousHash =previousHash;
        this.hash =this.calculateHash;
        this.nonce =0;
    }


    calculateHash(){
        return SHA256(this.index + this.previousHash + this.timestamp + JSON.stringify(this.data) +this.nonce).toString();
    }

    mineBlock(difficulty){
        while(this.hash.substring(0,difficulty) !== Array(difficulty+1).join("0")){
            this.nonce++;
            this.hash =this.calculateHash();
        }
        console.log("Block mined: "+this.hash)
    }

    hasValidTransactions(){
        for(const ts of this.transactions){
            if (!tx.isValid) {
                return false;
            }
        }
        return true;
    }
}

class BlockChain{
    constructor(){
        this.chain =[this.createGenesisBlock()];
        this.difficulty=2;  //this.difficulty=4;
        this.pendingTransactions =[];
        this.miningReward =100;
        }

    createGenesisBlock(){
        return new Block(0,"01,01,2017","Genesis block","0");
    }
    
    getLatestBlock(){
        return this.chain[this.chain.length-1];
    }

    minePendingTransactions(miningRewardAddress){
        let block =new block(Date.now(),this.pendingTransactions);
        block.mineBlock(this.difficulty);

        console.log('Block successfully mined !');
        this.chain.push(block);

        this.pendingTransactions=[
            new Transaction(null,miningRewardAddress,this.miningReward)
        ];
    }

    // createTransaction(transaction){
    //     this.pendingTransactions.push(transaction);
    // }

    addTransaction(transaction){

        if(!transaction.formAddress || !transaction.toAddress){
            throw new Error('Transaction must include form and to address');
        }

        if(!transaction.isValid()){
            throw new Error('Can’t add invalid transaction to chain');
        }

        this.pendingTransactions.push(transaction);
    }

    getBalanceOfAddress(address){
        let balance =0;

        for(const block of this.chain){
            for(const trans of block.transactions){
                if(trans.formAddress === address){
                    balance -= trans.amount;
                }

                if(trans.formAddress === address){
                    balance += trans.amount;
                }

            }
        }
    }

    // addBlock(newBlock){
    //     newBlock.previousHash =this.getLatestBlock().hash;
    //     // newBlock.hash =newBlock.calculateHash();
    //     newBlock.mineBlock(this.difficulty);
    //     this.chain.push(newBlock);
    // }

    isChainValid(){
        for(let i=1;i<this.chain.length ;i++){
                const currentBlock =this.chain[i];
                const previousBlock =this.chain[i-1];


            if(!currentBlock.hasValidTransactions()){
                return false
            }    

            if(currentBlock.hash !== currentBlock.calculateHash()){
                    return false;
            }
            if(previousBlock.calculateHash() !== previousBlock.hash){
                return false;
            }
        }
        return true;
    }

  }
    
  module.exports.BlockChain =BlockChain;
  module.exports.Transaction =Transaction;


 
